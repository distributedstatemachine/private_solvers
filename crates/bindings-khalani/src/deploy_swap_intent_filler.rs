pub use deploy_swap_intent_filler::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod deploy_swap_intent_filler {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::None,
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("IS_SCRIPT"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("IS_SCRIPT"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("KHALANI_CHAIN_ID"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("KHALANI_CHAIN_ID"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(32usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint32"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("KHALANI_CHAIN_URL"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("KHALANI_CHAIN_URL"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::String,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("string"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("KHALANI_MAILBOX"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("KHALANI_MAILBOX"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("SPOKE_CHAIN_ID"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("SPOKE_CHAIN_ID"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(32usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint32"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("SPOKE_CHAIN_MAILBOX"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "SPOKE_CHAIN_MAILBOX",
                            ),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("SPOKE_CHAIN_URL"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("SPOKE_CHAIN_URL"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::String,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("string"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("run"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("run"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static DEPLOYSWAPINTENTFILLER_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R`\x04\x80T`\x01`\xFF\x19\x91\x82\x16\x81\x17\x90\x92U`\x0C\x80T\x90\x91\x16\x90\x91\x17\x90U4\x80\x15a\0-W`\0\x80\xFD[Pa\x1C\x05\x80a\0=`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\x88W`\x005`\xE0\x1C\x80c\x8F\xBB\x93i\x11a\0[W\x80c\x8F\xBB\x93i\x14a\x01KW\x80c\xAB\x04\x94\x89\x14a\x01SW\x80c\xC0@b&\x14a\x01\\W\x80c\xF8\xCC\xBFG\x14a\x01fW`\0\x80\xFD[\x80cJ\xAD\xDB_\x14a\0\x8DW\x80cP\x97R\xF9\x14a\0\xDFW\x80c\x80\x05\x9E\xF4\x14a\x01\x12W\x80c\x8A}\x0BF\x14a\x01-W[`\0\x80\xFD[a\0\xC9`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7Fhttps://testnet.khalani.network\0\x81RP\x81V[`@Qa\0\xD6\x91\x90a\rjV[`@Q\x80\x91\x03\x90\xF3[a\0\xFAs\xCF#\x97\x18\xB2.M\xF0+\xEA\x0E\x13\x8E\xFDx\x86\x95\x1A\x91\x8B\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\xD6V[a\0\xFAs\xCCsz\x94\xFE\xCA\xEC\x16Z\xBC\xF1-\xED\t[\xB1?\x03v\x85\x81V[a\x016a'\x1C\x81V[`@Qc\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\0\xD6V[a\0\xC9a\x01\x83V[a\x016a\xA8i\x81V[a\x01da\x01\x9FV[\0[`\x0CTa\x01s\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0\xD6V[`@Q\x80``\x01`@R\x80`*\x81R` \x01a\x1B\xA6`*\x919\x81V[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01Rj)\xA8'\xA5\xA2\xAF\xA1\xA4 \xA4\xA7`\xA9\x1B`D\x82\x01R`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\rW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x025\x91\x90\x81\x01\x90a\r\x9AV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FSPOKE_CHAIN_EVENT_PROVER\0\0\0\0\0\0\0\0`D\x82\x01R\x90\x91P`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\xB8W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xDC\x91\x90a\x0EGV[\x90Pa\x03\x08\x82\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x05\xBDV[\x80Q`\r\x90\x81U` \x82\x01Q`\x0E\x90a\x03!\x90\x82a\x0E\xF9V[P`@\x82\x01Q`\x02\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U``\x84\x01Q`\x03\x84\x01\x80T\x91\x84\x16\x91\x83\x16\x91\x90\x91\x17\x90U`\x80\x84\x01Q`\x04\x84\x01\x80T\x91\x90\x93\x16\x91\x16\x17\x90U`\xA0\x82\x01Q\x80Qa\x03\x8E\x91`\x05\x84\x01\x91` \x90\x91\x01\x90a\x0C\x93V[PP`@Qc&\x1A\0\r`\xE2\x1B\x81Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc\x98h\x004\x90a\x03\xC9\x90`\x0E\x90`\x04\x01a\x0F\xB9V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x03\xE8W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x0C\x91\x90a\x10DV[P\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x04kW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x04\x7FW=`\0\x80>=`\0\xFD[PPPP`\0\x81`@Qa\x04\x92\x90a\x0C\xF8V[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\x04\xBEW=`\0\x80>=`\0\xFD[P\x90Pa\x04\xE3`@Q\x80``\x01`@R\x80`!\x81R` \x01a\x1B\x85`!\x919\x82a\x0B\xA3V[`@Qco\xF3\xFE\x95`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R\x83\x91\x90\x82\x16\x90co\xF3\xFE\x95\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x05)W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x05=W=`\0\x80>=`\0\xFD[PPPP\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x05\x9FW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x05\xB3W=`\0\x80>=`\0\xFD[PPPPPPPPV[`@\x80Q`\xC0\x81\x01\x82R`\0\x80\x82R``` \x83\x01\x81\x90R\x92\x82\x01\x81\x90R\x82\x82\x01\x81\x90R`\x80\x82\x01R`\xA0\x81\x01\x91\x90\x91R`@Qc`\xF9\xBB\x11`\xE0\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7F./script/config/deploy_config.js`D\x82\x01Ra7\xB7`\xF1\x1B`d\x82\x01R`\0\x90`\x01`\x01`\xA0\x1B\x03\x84\x16\x90c`\xF9\xBB\x11\x90`\x84\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06nW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x06\x96\x91\x90\x81\x01\x90a\r\x9AV[\x90P\x83`@Q` \x01a\x06\xA9\x91\x90a\x10]V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x93P\x82`\x01`\x01`\xA0\x1B\x03\x16c\xAD\xDD\xE2\xB6\x82\x86`@Q` \x01a\x06\xDB\x91\x90a\x10\x86V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07\x07\x92\x91\x90a\x10\xB2V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x07&W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07J\x91\x90a\x10DV[\x82R`@Q`\x01`\x01`\xA0\x1B\x03\x84\x16\x90cI\xC4\xFA\xC8\x90\x83\x90a\x07p\x90\x88\x90` \x01a\x10\xE0V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07\x9C\x92\x91\x90a\x10\xB2V[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x07\xBBW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x07\xE3\x91\x90\x81\x01\x90a\r\x9AV[\x82` \x01\x81\x90RP\x82`\x01`\x01`\xA0\x1B\x03\x16c\x1E\x19\xE6W\x82\x86`@Q` \x01a\x08\x0C\x91\x90a\x11\x0BV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x088\x92\x91\x90a\x10\xB2V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x08WW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08{\x91\x90a\x0EGV[\x82`@\x01\x90`\x01`\x01`\xA0\x1B\x03\x16\x90\x81`\x01`\x01`\xA0\x1B\x03\x16\x81RPP\x82`\x01`\x01`\xA0\x1B\x03\x16c\x1E\x19\xE6W\x82\x86`@Q` \x01a\x08\xB9\x91\x90a\x11@V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x08\xE5\x92\x91\x90a\x10\xB2V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\t\x04W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t(\x91\x90a\x0EGV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16`\x80\x84\x01R`@Q\x90\x84\x16\x90c\x1E\x19\xE6W\x90\x83\x90a\tU\x90\x88\x90` \x01a\x11qV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\t\x81\x92\x91\x90a\x10\xB2V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\t\xA0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xC4\x91\x90a\x0EGV[`\x01`\x01`\xA0\x1B\x03\x16``\x83\x01R`@\x80Q\x80\x82\x01\x90\x91R`\x18\x81R\x7FRead DeployConfig for %s\0\0\0\0\0\0\0\0` \x82\x01Ra\n\x10\x90\x85a\x0B\xECV[a\nD`@Q\x80`@\x01`@R\x80`\x0E\x81R` \x01m  chainId = %s`\x90\x1B\x81RP\x83`\0\x01Qa\x0C1V[a\n\x87`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7F  hyperlaneMailbox = %s\0\0\0\0\0\0\0\0\0\x81RP\x83`@\x01Qa\x0B\xA3V[a\n\xC0`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01r  hyperlaneISM = %s`h\x1B\x81RP\x83`\x80\x01Qa\x0B\xA3V[a\n\xF3`@Q\x80`@\x01`@R\x80`\r\x81R` \x01l  rpcUrl = %s`\x98\x1B\x81RP\x83` \x01Qa\x0B\xECV[a\x0B.`@Q\x80`@\x01`@R\x80`\x14\x81R` \x01s  tokens.length = %s``\x1B\x81RP\x83`\xA0\x01QQa\x0C1V[`\0[\x82`\xA0\x01QQ\x81\x10\x15a\x0B\x9BWa\x0B\x89`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01k    token %s`\xA0\x1B\x81RP\x84`\xA0\x01Q\x83\x81Q\x81\x10a\x0B|Wa\x0B|a\x11\xA8V[` \x02` \x01\x01Qa\x0B\xA3V[\x80a\x0B\x93\x81a\x11\xBEV[\x91PPa\x0B1V[PP\x92\x91PPV[a\x0B\xE8\x82\x82`@Q`$\x01a\x0B\xB9\x92\x91\x90a\x11\xE5V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x0CrV[PPV[a\x0B\xE8\x82\x82`@Q`$\x01a\x0C\x02\x92\x91\x90a\x10\xB2V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cK\\Bw`\xE0\x1B\x17\x90Ra\x0CrV[a\x0B\xE8\x82\x82`@Q`$\x01a\x0CG\x92\x91\x90a\x12\x0FV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\tq\n\x9D`\xE4\x1B\x17\x90R[\x80Qjconsole.log` \x83\x01`\0\x80\x84\x83\x85Z\xFAPPPPPV[\x82\x80T\x82\x82U\x90`\0R` `\0 \x90\x81\x01\x92\x82\x15a\x0C\xE8W\x91` \x02\x82\x01[\x82\x81\x11\x15a\x0C\xE8W\x82Q\x82T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x17\x82U` \x90\x92\x01\x91`\x01\x90\x91\x01\x90a\x0C\xB3V[Pa\x0C\xF4\x92\x91Pa\r\x05V[P\x90V[a\tS\x80a\x122\x839\x01\x90V[[\x80\x82\x11\x15a\x0C\xF4W`\0\x81U`\x01\x01a\r\x06V[`\0[\x83\x81\x10\x15a\r5W\x81\x81\x01Q\x83\x82\x01R` \x01a\r\x1DV[PP`\0\x91\x01RV[`\0\x81Q\x80\x84Ra\rV\x81` \x86\x01` \x86\x01a\r\x1AV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R`\0a\r}` \x83\x01\x84a\r>V[\x93\x92PPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\r\xACW`\0\x80\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\r\xC4W`\0\x80\xFD[\x81\x84\x01\x91P\x84`\x1F\x83\x01\x12a\r\xD8W`\0\x80\xFD[\x81Q\x81\x81\x11\x15a\r\xEAWa\r\xEAa\r\x84V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x0E\x12Wa\x0E\x12a\r\x84V[\x81`@R\x82\x81R\x87` \x84\x87\x01\x01\x11\x15a\x0E+W`\0\x80\xFD[a\x0E<\x83` \x83\x01` \x88\x01a\r\x1AV[\x97\x96PPPPPPPV[`\0` \x82\x84\x03\x12\x15a\x0EYW`\0\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\r}W`\0\x80\xFD[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x0E\x84W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x0E\xA4WcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x0E\xF4W`\0\x81\x81R` \x81 `\x1F\x85\x01`\x05\x1C\x81\x01` \x86\x10\x15a\x0E\xD1WP\x80[`\x1F\x85\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x0E\xF0W\x82\x81U`\x01\x01a\x0E\xDDV[PPP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\x13Wa\x0F\x13a\r\x84V[a\x0F'\x81a\x0F!\x84Ta\x0EpV[\x84a\x0E\xAAV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x0F\\W`\0\x84\x15a\x0FDWP\x85\x83\x01Q[`\0\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x0E\xF0V[`\0\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x0F\x8BW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x0FlV[P\x85\x82\x10\x15a\x0F\xA9W\x87\x85\x01Q`\0\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[`\0` \x80\x83R`\0\x84Ta\x0F\xCD\x81a\x0EpV[\x80\x84\x87\x01R`@`\x01\x80\x84\x16`\0\x81\x14a\x0F\xEEW`\x01\x81\x14a\x10\x08Wa\x106V[`\xFF\x19\x85\x16\x89\x84\x01R\x83\x15\x15`\x05\x1B\x89\x01\x83\x01\x95Pa\x106V[\x89`\0R\x86`\0 `\0[\x85\x81\x10\x15a\x10.W\x81T\x8B\x82\x01\x86\x01R\x90\x83\x01\x90\x88\x01a\x10\x13V[\x8A\x01\x84\x01\x96PP[P\x93\x98\x97PPPPPPPPV[`\0` \x82\x84\x03\x12\x15a\x10VW`\0\x80\xFD[PQ\x91\x90PV[`\x17`\xF9\x1B\x81R`\0\x82Qa\x10y\x81`\x01\x85\x01` \x87\x01a\r\x1AV[\x91\x90\x91\x01`\x01\x01\x92\x91PPV[`\0\x82Qa\x10\x98\x81\x84` \x87\x01a\r\x1AV[g\x0B\x98\xDA\x18Z[\x92Y`\xC2\x1B\x92\x01\x91\x82RP`\x08\x01\x91\x90PV[`@\x81R`\0a\x10\xC5`@\x83\x01\x85a\r>V[\x82\x81\x03` \x84\x01Ra\x10\xD7\x81\x85a\r>V[\x95\x94PPPPPV[`\0\x82Qa\x10\xF2\x81\x84` \x87\x01a\r\x1AV[f\x0B\x9C\x9C\x18\xD5\\\x9B`\xCA\x1B\x92\x01\x91\x82RP`\x07\x01\x91\x90PV[`\0\x82Qa\x11\x1D\x81\x84` \x87\x01a\r\x1AV[p\x05\xCD\x0F.\x0C\xAEM\x8C-\xCC\xA9\xAC--\x8CM\xEF`{\x1B\x92\x01\x91\x82RP`\x11\x01\x91\x90PV[`\0\x82Qa\x11R\x81\x84` \x87\x01a\r\x1AV[l.hyperlaneISM`\x98\x1B\x92\x01\x91\x82RP`\r\x01\x91\x90PV[`\0\x82Qa\x11\x83\x81\x84` \x87\x01a\r\x1AV[r.hyperlaneGasOracle`h\x1B\x92\x01\x91\x82RP`\x13\x01\x91\x90PV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\0`\x01\x82\x01a\x11\xDEWcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[P`\x01\x01\x90V[`@\x81R`\0a\x11\xF8`@\x83\x01\x85a\r>V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`@\x81R`\0a\x12\"`@\x83\x01\x85a\r>V[\x90P\x82` \x83\x01R\x93\x92PPPV\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa\tS8\x03\x80a\tS\x839\x81\x01`@\x81\x90Ra\0/\x91a\0TV[`\0\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90Ua\0\x84V[`\0` \x82\x84\x03\x12\x15a\0fW`\0\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0}W`\0\x80\xFD[\x93\x92PPPV[a\x08\xC0\x80a\0\x93`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x006W`\x005`\xE0\x1C\x80c\x86\\\xB8\xC2\x14a\0;W\x80c\xA7\x11\xFFA\x14a\0jW[`\0\x80\xFD[`\0Ta\0N\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0}a\0x6`\x04a\x06EV[a\0\x7FV[\0[a\0\x88\x83a\x01\x89V[a\0\x9C\x83`\xA0\x01Q3\x85`\0\x01Q\x84a\x01\xB2V[`\0a\0\xA7\x84a\x02\x12V[`@\x80Q``\x81\x01\x82R\x82\x81R`\x01`\x01`\xA0\x1B\x03\x80\x87\x16` \x83\x01R\x91\x81\x01\x85\x90R`\0T\x92\x93P\x91\x16c\xD6k\"\xC8a\0\xE0\x83a\x02xV[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\0\xFE\x91\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x01\x18W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x01,W=`\0\x80>=`\0\xFD[PPPP\x84`\0\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x84`\x01`\x01`\xA0\x1B\x03\x16\x83\x7Fx\xAD~\xC0\xE9\xF8\x9Et\x01*\xFAXs\x8Bkf\x1C\x02L\xB0\xFD\x18^\xE2\xF6\x16\xC0\xA2\x89$\xBDf\x86`@Qa\x01z\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA4PPPPPV[\x80a\x01 \x01QB\x11\x15a\x01\xAFW`@Qc\x1A\xB7\xDAk`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`$\x83\x01R\x84\x16`D\x82\x01R`d\x80\x82\x01\x84\x90R\x82Q\x80\x83\x03\x90\x91\x01\x81R`\x84\x90\x91\x01\x90\x91R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c#\xB8r\xDD`\xE0\x1B\x17\x90Ra\x02\x0C\x90\x85\x90a\x02\xD9V[PPPPV[`\0\x81`\0\x01Q\x82`@\x01Q\x83``\x01Q\x84`\x80\x01Q\x85`\xA0\x01Q\x86`\xC0\x01Q\x87`\xE0\x01Q\x88a\x01\0\x01Q\x89a\x01 \x01Q`@Q` \x01a\x02[\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x07\x8CV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[`\0\x81`\0\x01Q\x82` \x01Q\x83`@\x01Q`@Q` \x01a\x02[\x93\x92\x91\x90o\x14\xDD\xD8\\\x12[\x9D\x19[\x9D\x11\x9A[\x1B\x19Y`\x82\x1B\x81R`\x10\x81\x01\x93\x90\x93R``\x91\x90\x91\x1Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`0\x83\x01R`D\x82\x01R`d\x01\x90V[`\0a\x03.\x82`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FSafeERC20: low-level call failed\x81RP\x85`\x01`\x01`\xA0\x1B\x03\x16a\x03\xB8\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x80Q`\0\x14\x80a\x03OWP\x80\x80` \x01\x90Q\x81\x01\x90a\x03O\x91\x90a\x08\x12V[a\x03\xB3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01Ri\x1B\xDD\x08\x1C\xDDX\xD8\xD9YY`\xB2\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[PPPV[``a\x03\xC7\x84\x84`\0\x85a\x03\xCFV[\x94\x93PPPPV[``\x82G\x10\x15a\x040W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01Re\x1C\x88\x18\xD8[\x1B`\xD2\x1B`d\x82\x01R`\x84\x01a\x03\xAAV[`\0\x80\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\x04L\x91\x90a\x08;V[`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x04\x89W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x04\x8EV[``\x91P[P\x91P\x91Pa\x04\x9F\x87\x83\x83\x87a\x04\xAAV[\x97\x96PPPPPPPV[``\x83\x15a\x05\x19W\x82Q`\0\x03a\x05\x12W`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x05\x12W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x03\xAAV[P\x81a\x03\xC7V[a\x03\xC7\x83\x83\x81Q\x15a\x05.W\x81Q\x80\x83` \x01\xFD[\x80`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xAA\x91\x90a\x08WV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@Qa\x01@\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x05\x82Wa\x05\x82a\x05HV[`@R\x90V[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05\x9FW`\0\x80\xFD[\x91\x90PV[`\0\x82`\x1F\x83\x01\x12a\x05\xB5W`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x05\xD0Wa\x05\xD0a\x05HV[`@Q`\x1F\x83\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15a\x05\xF8Wa\x05\xF8a\x05HV[\x81`@R\x83\x81R\x86` \x85\x88\x01\x01\x11\x15a\x06\x11W`\0\x80\xFD[\x83` \x87\x01` \x83\x017`\0` \x85\x83\x01\x01R\x80\x94PPPPP\x92\x91PPV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x05\x9FW`\0\x80\xFD[`\0\x80`\0``\x84\x86\x03\x12\x15a\x06ZW`\0\x80\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x06rW`\0\x80\xFD[\x90\x85\x01\x90a\x01@\x82\x88\x03\x12\x15a\x06\x87W`\0\x80\xFD[a\x06\x8Fa\x05^V[a\x06\x98\x83a\x05\x88V[\x81R` \x83\x015\x82\x81\x11\x15a\x06\xACW`\0\x80\xFD[a\x06\xB8\x89\x82\x86\x01a\x05\xA4V[` \x83\x01RPa\x06\xCA`@\x84\x01a\x061V[`@\x82\x01Ra\x06\xDB``\x84\x01a\x061V[``\x82\x01Ra\x06\xEC`\x80\x84\x01a\x05\x88V[`\x80\x82\x01Ra\x06\xFD`\xA0\x84\x01a\x05\x88V[`\xA0\x82\x01R`\xC0\x83\x015`\xC0\x82\x01R`\xE0\x83\x015\x82\x81\x11\x15a\x07\x1EW`\0\x80\xFD[a\x07*\x89\x82\x86\x01a\x05\xA4V[`\xE0\x83\x01RPa\x01\0\x83\x81\x015\x90\x82\x01Ra\x01 \x92\x83\x015\x92\x81\x01\x92\x90\x92RP\x92Pa\x07X` \x85\x01a\x05\x88V[\x91P`@\x84\x015\x90P\x92P\x92P\x92V[`\0[\x83\x81\x10\x15a\x07\x83W\x81\x81\x01Q\x83\x82\x01R` \x01a\x07kV[PP`\0\x91\x01RV[`\0k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x80\x8C``\x1B\x16\x83Rc\xFF\xFF\xFF\xFF`\xE0\x1B\x80\x8C`\xE0\x1B\x16`\x14\x85\x01R\x80\x8B`\xE0\x1B\x16`\x18\x85\x01RP\x80\x89``\x1B\x16`\x1C\x84\x01R\x80\x88``\x1B\x16`0\x84\x01RP\x85`D\x83\x01R\x84Qa\x07\xF3\x81`d\x85\x01` \x89\x01a\x07hV[\x90\x91\x01`d\x81\x01\x93\x90\x93RP`\x84\x82\x01R`\xA4\x01\x97\x96PPPPPPPV[`\0` \x82\x84\x03\x12\x15a\x08$W`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x084W`\0\x80\xFD[\x93\x92PPPV[`\0\x82Qa\x08M\x81\x84` \x87\x01a\x07hV[\x91\x90\x91\x01\x92\x91PPV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x08v\x81`@\x85\x01` \x87\x01a\x07hV[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV\xFE\xA2dipfsX\"\x12 \x86K\xD9/\xFEe\xA0\x86\x14t:\xF8\x9Dn]\x81sN\x084;0\x91\x93*\x07\xDDxI\xCF\x83,dsolcC\0\x08\x13\x003Deployed Swap Intent Filler at %shttps://api.avax-test.network/ext/bc/C/rpc\xA2dipfsX\"\x12 \xC37\x99\x1B\x93\\-u\x7F\xCB\x87\xE3o\r%V)\x17\x1D\xC93\r\xAAOtORB(\xDC\x8F\xE0dsolcC\0\x08\x13\x003";
    /// The bytecode of the contract.
    pub static DEPLOYSWAPINTENTFILLER_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\x88W`\x005`\xE0\x1C\x80c\x8F\xBB\x93i\x11a\0[W\x80c\x8F\xBB\x93i\x14a\x01KW\x80c\xAB\x04\x94\x89\x14a\x01SW\x80c\xC0@b&\x14a\x01\\W\x80c\xF8\xCC\xBFG\x14a\x01fW`\0\x80\xFD[\x80cJ\xAD\xDB_\x14a\0\x8DW\x80cP\x97R\xF9\x14a\0\xDFW\x80c\x80\x05\x9E\xF4\x14a\x01\x12W\x80c\x8A}\x0BF\x14a\x01-W[`\0\x80\xFD[a\0\xC9`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7Fhttps://testnet.khalani.network\0\x81RP\x81V[`@Qa\0\xD6\x91\x90a\rjV[`@Q\x80\x91\x03\x90\xF3[a\0\xFAs\xCF#\x97\x18\xB2.M\xF0+\xEA\x0E\x13\x8E\xFDx\x86\x95\x1A\x91\x8B\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\xD6V[a\0\xFAs\xCCsz\x94\xFE\xCA\xEC\x16Z\xBC\xF1-\xED\t[\xB1?\x03v\x85\x81V[a\x016a'\x1C\x81V[`@Qc\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\0\xD6V[a\0\xC9a\x01\x83V[a\x016a\xA8i\x81V[a\x01da\x01\x9FV[\0[`\x0CTa\x01s\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0\xD6V[`@Q\x80``\x01`@R\x80`*\x81R` \x01a\x1B\xA6`*\x919\x81V[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01Rj)\xA8'\xA5\xA2\xAF\xA1\xA4 \xA4\xA7`\xA9\x1B`D\x82\x01R`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\rW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x025\x91\x90\x81\x01\x90a\r\x9AV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x18`$\x82\x01R\x7FSPOKE_CHAIN_EVENT_PROVER\0\0\0\0\0\0\0\0`D\x82\x01R\x90\x91P`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\xB8W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xDC\x91\x90a\x0EGV[\x90Pa\x03\x08\x82\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x05\xBDV[\x80Q`\r\x90\x81U` \x82\x01Q`\x0E\x90a\x03!\x90\x82a\x0E\xF9V[P`@\x82\x01Q`\x02\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U``\x84\x01Q`\x03\x84\x01\x80T\x91\x84\x16\x91\x83\x16\x91\x90\x91\x17\x90U`\x80\x84\x01Q`\x04\x84\x01\x80T\x91\x90\x93\x16\x91\x16\x17\x90U`\xA0\x82\x01Q\x80Qa\x03\x8E\x91`\x05\x84\x01\x91` \x90\x91\x01\x90a\x0C\x93V[PP`@Qc&\x1A\0\r`\xE2\x1B\x81Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc\x98h\x004\x90a\x03\xC9\x90`\x0E\x90`\x04\x01a\x0F\xB9V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x03\xE8W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x0C\x91\x90a\x10DV[P\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x04kW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x04\x7FW=`\0\x80>=`\0\xFD[PPPP`\0\x81`@Qa\x04\x92\x90a\x0C\xF8V[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90`\0\xF0\x80\x15\x80\x15a\x04\xBEW=`\0\x80>=`\0\xFD[P\x90Pa\x04\xE3`@Q\x80``\x01`@R\x80`!\x81R` \x01a\x1B\x85`!\x919\x82a\x0B\xA3V[`@Qco\xF3\xFE\x95`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x81\x16`\x04\x83\x01R\x83\x91\x90\x82\x16\x90co\xF3\xFE\x95\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x05)W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x05=W=`\0\x80>=`\0\xFD[PPPP\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x05\x9FW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x05\xB3W=`\0\x80>=`\0\xFD[PPPPPPPPV[`@\x80Q`\xC0\x81\x01\x82R`\0\x80\x82R``` \x83\x01\x81\x90R\x92\x82\x01\x81\x90R\x82\x82\x01\x81\x90R`\x80\x82\x01R`\xA0\x81\x01\x91\x90\x91R`@Qc`\xF9\xBB\x11`\xE0\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7F./script/config/deploy_config.js`D\x82\x01Ra7\xB7`\xF1\x1B`d\x82\x01R`\0\x90`\x01`\x01`\xA0\x1B\x03\x84\x16\x90c`\xF9\xBB\x11\x90`\x84\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06nW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x06\x96\x91\x90\x81\x01\x90a\r\x9AV[\x90P\x83`@Q` \x01a\x06\xA9\x91\x90a\x10]V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x93P\x82`\x01`\x01`\xA0\x1B\x03\x16c\xAD\xDD\xE2\xB6\x82\x86`@Q` \x01a\x06\xDB\x91\x90a\x10\x86V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07\x07\x92\x91\x90a\x10\xB2V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x07&W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07J\x91\x90a\x10DV[\x82R`@Q`\x01`\x01`\xA0\x1B\x03\x84\x16\x90cI\xC4\xFA\xC8\x90\x83\x90a\x07p\x90\x88\x90` \x01a\x10\xE0V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07\x9C\x92\x91\x90a\x10\xB2V[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x07\xBBW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x07\xE3\x91\x90\x81\x01\x90a\r\x9AV[\x82` \x01\x81\x90RP\x82`\x01`\x01`\xA0\x1B\x03\x16c\x1E\x19\xE6W\x82\x86`@Q` \x01a\x08\x0C\x91\x90a\x11\x0BV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x088\x92\x91\x90a\x10\xB2V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x08WW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08{\x91\x90a\x0EGV[\x82`@\x01\x90`\x01`\x01`\xA0\x1B\x03\x16\x90\x81`\x01`\x01`\xA0\x1B\x03\x16\x81RPP\x82`\x01`\x01`\xA0\x1B\x03\x16c\x1E\x19\xE6W\x82\x86`@Q` \x01a\x08\xB9\x91\x90a\x11@V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x08\xE5\x92\x91\x90a\x10\xB2V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\t\x04W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t(\x91\x90a\x0EGV[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16`\x80\x84\x01R`@Q\x90\x84\x16\x90c\x1E\x19\xE6W\x90\x83\x90a\tU\x90\x88\x90` \x01a\x11qV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\t\x81\x92\x91\x90a\x10\xB2V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\t\xA0W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xC4\x91\x90a\x0EGV[`\x01`\x01`\xA0\x1B\x03\x16``\x83\x01R`@\x80Q\x80\x82\x01\x90\x91R`\x18\x81R\x7FRead DeployConfig for %s\0\0\0\0\0\0\0\0` \x82\x01Ra\n\x10\x90\x85a\x0B\xECV[a\nD`@Q\x80`@\x01`@R\x80`\x0E\x81R` \x01m  chainId = %s`\x90\x1B\x81RP\x83`\0\x01Qa\x0C1V[a\n\x87`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7F  hyperlaneMailbox = %s\0\0\0\0\0\0\0\0\0\x81RP\x83`@\x01Qa\x0B\xA3V[a\n\xC0`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01r  hyperlaneISM = %s`h\x1B\x81RP\x83`\x80\x01Qa\x0B\xA3V[a\n\xF3`@Q\x80`@\x01`@R\x80`\r\x81R` \x01l  rpcUrl = %s`\x98\x1B\x81RP\x83` \x01Qa\x0B\xECV[a\x0B.`@Q\x80`@\x01`@R\x80`\x14\x81R` \x01s  tokens.length = %s``\x1B\x81RP\x83`\xA0\x01QQa\x0C1V[`\0[\x82`\xA0\x01QQ\x81\x10\x15a\x0B\x9BWa\x0B\x89`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01k    token %s`\xA0\x1B\x81RP\x84`\xA0\x01Q\x83\x81Q\x81\x10a\x0B|Wa\x0B|a\x11\xA8V[` \x02` \x01\x01Qa\x0B\xA3V[\x80a\x0B\x93\x81a\x11\xBEV[\x91PPa\x0B1V[PP\x92\x91PPV[a\x0B\xE8\x82\x82`@Q`$\x01a\x0B\xB9\x92\x91\x90a\x11\xE5V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x0CrV[PPV[a\x0B\xE8\x82\x82`@Q`$\x01a\x0C\x02\x92\x91\x90a\x10\xB2V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cK\\Bw`\xE0\x1B\x17\x90Ra\x0CrV[a\x0B\xE8\x82\x82`@Q`$\x01a\x0CG\x92\x91\x90a\x12\x0FV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\tq\n\x9D`\xE4\x1B\x17\x90R[\x80Qjconsole.log` \x83\x01`\0\x80\x84\x83\x85Z\xFAPPPPPV[\x82\x80T\x82\x82U\x90`\0R` `\0 \x90\x81\x01\x92\x82\x15a\x0C\xE8W\x91` \x02\x82\x01[\x82\x81\x11\x15a\x0C\xE8W\x82Q\x82T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x17\x82U` \x90\x92\x01\x91`\x01\x90\x91\x01\x90a\x0C\xB3V[Pa\x0C\xF4\x92\x91Pa\r\x05V[P\x90V[a\tS\x80a\x122\x839\x01\x90V[[\x80\x82\x11\x15a\x0C\xF4W`\0\x81U`\x01\x01a\r\x06V[`\0[\x83\x81\x10\x15a\r5W\x81\x81\x01Q\x83\x82\x01R` \x01a\r\x1DV[PP`\0\x91\x01RV[`\0\x81Q\x80\x84Ra\rV\x81` \x86\x01` \x86\x01a\r\x1AV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R`\0a\r}` \x83\x01\x84a\r>V[\x93\x92PPPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\r\xACW`\0\x80\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\r\xC4W`\0\x80\xFD[\x81\x84\x01\x91P\x84`\x1F\x83\x01\x12a\r\xD8W`\0\x80\xFD[\x81Q\x81\x81\x11\x15a\r\xEAWa\r\xEAa\r\x84V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x83\x82\x11\x81\x83\x10\x17\x15a\x0E\x12Wa\x0E\x12a\r\x84V[\x81`@R\x82\x81R\x87` \x84\x87\x01\x01\x11\x15a\x0E+W`\0\x80\xFD[a\x0E<\x83` \x83\x01` \x88\x01a\r\x1AV[\x97\x96PPPPPPPV[`\0` \x82\x84\x03\x12\x15a\x0EYW`\0\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\r}W`\0\x80\xFD[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x0E\x84W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x0E\xA4WcNH{q`\xE0\x1B`\0R`\"`\x04R`$`\0\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x0E\xF4W`\0\x81\x81R` \x81 `\x1F\x85\x01`\x05\x1C\x81\x01` \x86\x10\x15a\x0E\xD1WP\x80[`\x1F\x85\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x0E\xF0W\x82\x81U`\x01\x01a\x0E\xDDV[PPP[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\x13Wa\x0F\x13a\r\x84V[a\x0F'\x81a\x0F!\x84Ta\x0EpV[\x84a\x0E\xAAV[` \x80`\x1F\x83\x11`\x01\x81\x14a\x0F\\W`\0\x84\x15a\x0FDWP\x85\x83\x01Q[`\0\x19`\x03\x86\x90\x1B\x1C\x19\x16`\x01\x85\x90\x1B\x17\x85Ua\x0E\xF0V[`\0\x85\x81R` \x81 `\x1F\x19\x86\x16\x91[\x82\x81\x10\x15a\x0F\x8BW\x88\x86\x01Q\x82U\x94\x84\x01\x94`\x01\x90\x91\x01\x90\x84\x01a\x0FlV[P\x85\x82\x10\x15a\x0F\xA9W\x87\x85\x01Q`\0\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[`\0` \x80\x83R`\0\x84Ta\x0F\xCD\x81a\x0EpV[\x80\x84\x87\x01R`@`\x01\x80\x84\x16`\0\x81\x14a\x0F\xEEW`\x01\x81\x14a\x10\x08Wa\x106V[`\xFF\x19\x85\x16\x89\x84\x01R\x83\x15\x15`\x05\x1B\x89\x01\x83\x01\x95Pa\x106V[\x89`\0R\x86`\0 `\0[\x85\x81\x10\x15a\x10.W\x81T\x8B\x82\x01\x86\x01R\x90\x83\x01\x90\x88\x01a\x10\x13V[\x8A\x01\x84\x01\x96PP[P\x93\x98\x97PPPPPPPPV[`\0` \x82\x84\x03\x12\x15a\x10VW`\0\x80\xFD[PQ\x91\x90PV[`\x17`\xF9\x1B\x81R`\0\x82Qa\x10y\x81`\x01\x85\x01` \x87\x01a\r\x1AV[\x91\x90\x91\x01`\x01\x01\x92\x91PPV[`\0\x82Qa\x10\x98\x81\x84` \x87\x01a\r\x1AV[g\x0B\x98\xDA\x18Z[\x92Y`\xC2\x1B\x92\x01\x91\x82RP`\x08\x01\x91\x90PV[`@\x81R`\0a\x10\xC5`@\x83\x01\x85a\r>V[\x82\x81\x03` \x84\x01Ra\x10\xD7\x81\x85a\r>V[\x95\x94PPPPPV[`\0\x82Qa\x10\xF2\x81\x84` \x87\x01a\r\x1AV[f\x0B\x9C\x9C\x18\xD5\\\x9B`\xCA\x1B\x92\x01\x91\x82RP`\x07\x01\x91\x90PV[`\0\x82Qa\x11\x1D\x81\x84` \x87\x01a\r\x1AV[p\x05\xCD\x0F.\x0C\xAEM\x8C-\xCC\xA9\xAC--\x8CM\xEF`{\x1B\x92\x01\x91\x82RP`\x11\x01\x91\x90PV[`\0\x82Qa\x11R\x81\x84` \x87\x01a\r\x1AV[l.hyperlaneISM`\x98\x1B\x92\x01\x91\x82RP`\r\x01\x91\x90PV[`\0\x82Qa\x11\x83\x81\x84` \x87\x01a\r\x1AV[r.hyperlaneGasOracle`h\x1B\x92\x01\x91\x82RP`\x13\x01\x91\x90PV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\0`\x01\x82\x01a\x11\xDEWcNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[P`\x01\x01\x90V[`@\x81R`\0a\x11\xF8`@\x83\x01\x85a\r>V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`@\x81R`\0a\x12\"`@\x83\x01\x85a\r>V[\x90P\x82` \x83\x01R\x93\x92PPPV\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`@Qa\tS8\x03\x80a\tS\x839\x81\x01`@\x81\x90Ra\0/\x91a\0TV[`\0\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90Ua\0\x84V[`\0` \x82\x84\x03\x12\x15a\0fW`\0\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0}W`\0\x80\xFD[\x93\x92PPPV[a\x08\xC0\x80a\0\x93`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\x006W`\x005`\xE0\x1C\x80c\x86\\\xB8\xC2\x14a\0;W\x80c\xA7\x11\xFFA\x14a\0jW[`\0\x80\xFD[`\0Ta\0N\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0}a\0x6`\x04a\x06EV[a\0\x7FV[\0[a\0\x88\x83a\x01\x89V[a\0\x9C\x83`\xA0\x01Q3\x85`\0\x01Q\x84a\x01\xB2V[`\0a\0\xA7\x84a\x02\x12V[`@\x80Q``\x81\x01\x82R\x82\x81R`\x01`\x01`\xA0\x1B\x03\x80\x87\x16` \x83\x01R\x91\x81\x01\x85\x90R`\0T\x92\x93P\x91\x16c\xD6k\"\xC8a\0\xE0\x83a\x02xV[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\0\xFE\x91\x81R` \x01\x90V[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x01\x18W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x01,W=`\0\x80>=`\0\xFD[PPPP\x84`\0\x01Q`\x01`\x01`\xA0\x1B\x03\x16\x84`\x01`\x01`\xA0\x1B\x03\x16\x83\x7Fx\xAD~\xC0\xE9\xF8\x9Et\x01*\xFAXs\x8Bkf\x1C\x02L\xB0\xFD\x18^\xE2\xF6\x16\xC0\xA2\x89$\xBDf\x86`@Qa\x01z\x91\x81R` \x01\x90V[`@Q\x80\x91\x03\x90\xA4PPPPPV[\x80a\x01 \x01QB\x11\x15a\x01\xAFW`@Qc\x1A\xB7\xDAk`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`$\x83\x01R\x84\x16`D\x82\x01R`d\x80\x82\x01\x84\x90R\x82Q\x80\x83\x03\x90\x91\x01\x81R`\x84\x90\x91\x01\x90\x91R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c#\xB8r\xDD`\xE0\x1B\x17\x90Ra\x02\x0C\x90\x85\x90a\x02\xD9V[PPPPV[`\0\x81`\0\x01Q\x82`@\x01Q\x83``\x01Q\x84`\x80\x01Q\x85`\xA0\x01Q\x86`\xC0\x01Q\x87`\xE0\x01Q\x88a\x01\0\x01Q\x89a\x01 \x01Q`@Q` \x01a\x02[\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x07\x8CV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[`\0\x81`\0\x01Q\x82` \x01Q\x83`@\x01Q`@Q` \x01a\x02[\x93\x92\x91\x90o\x14\xDD\xD8\\\x12[\x9D\x19[\x9D\x11\x9A[\x1B\x19Y`\x82\x1B\x81R`\x10\x81\x01\x93\x90\x93R``\x91\x90\x91\x1Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`0\x83\x01R`D\x82\x01R`d\x01\x90V[`\0a\x03.\x82`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FSafeERC20: low-level call failed\x81RP\x85`\x01`\x01`\xA0\x1B\x03\x16a\x03\xB8\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x80Q`\0\x14\x80a\x03OWP\x80\x80` \x01\x90Q\x81\x01\x90a\x03O\x91\x90a\x08\x12V[a\x03\xB3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FSafeERC20: ERC20 operation did n`D\x82\x01Ri\x1B\xDD\x08\x1C\xDDX\xD8\xD9YY`\xB2\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[PPPV[``a\x03\xC7\x84\x84`\0\x85a\x03\xCFV[\x94\x93PPPPV[``\x82G\x10\x15a\x040W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`&`$\x82\x01R\x7FAddress: insufficient balance fo`D\x82\x01Re\x1C\x88\x18\xD8[\x1B`\xD2\x1B`d\x82\x01R`\x84\x01a\x03\xAAV[`\0\x80\x86`\x01`\x01`\xA0\x1B\x03\x16\x85\x87`@Qa\x04L\x91\x90a\x08;V[`\0`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80`\0\x81\x14a\x04\x89W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x04\x8EV[``\x91P[P\x91P\x91Pa\x04\x9F\x87\x83\x83\x87a\x04\xAAV[\x97\x96PPPPPPPV[``\x83\x15a\x05\x19W\x82Q`\0\x03a\x05\x12W`\x01`\x01`\xA0\x1B\x03\x85\x16;a\x05\x12W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FAddress: call to non-contract\0\0\0`D\x82\x01R`d\x01a\x03\xAAV[P\x81a\x03\xC7V[a\x03\xC7\x83\x83\x81Q\x15a\x05.W\x81Q\x80\x83` \x01\xFD[\x80`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xAA\x91\x90a\x08WV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@Qa\x01@\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x05\x82Wa\x05\x82a\x05HV[`@R\x90V[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05\x9FW`\0\x80\xFD[\x91\x90PV[`\0\x82`\x1F\x83\x01\x12a\x05\xB5W`\0\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x05\xD0Wa\x05\xD0a\x05HV[`@Q`\x1F\x83\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15a\x05\xF8Wa\x05\xF8a\x05HV[\x81`@R\x83\x81R\x86` \x85\x88\x01\x01\x11\x15a\x06\x11W`\0\x80\xFD[\x83` \x87\x01` \x83\x017`\0` \x85\x83\x01\x01R\x80\x94PPPPP\x92\x91PPV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x05\x9FW`\0\x80\xFD[`\0\x80`\0``\x84\x86\x03\x12\x15a\x06ZW`\0\x80\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x06rW`\0\x80\xFD[\x90\x85\x01\x90a\x01@\x82\x88\x03\x12\x15a\x06\x87W`\0\x80\xFD[a\x06\x8Fa\x05^V[a\x06\x98\x83a\x05\x88V[\x81R` \x83\x015\x82\x81\x11\x15a\x06\xACW`\0\x80\xFD[a\x06\xB8\x89\x82\x86\x01a\x05\xA4V[` \x83\x01RPa\x06\xCA`@\x84\x01a\x061V[`@\x82\x01Ra\x06\xDB``\x84\x01a\x061V[``\x82\x01Ra\x06\xEC`\x80\x84\x01a\x05\x88V[`\x80\x82\x01Ra\x06\xFD`\xA0\x84\x01a\x05\x88V[`\xA0\x82\x01R`\xC0\x83\x015`\xC0\x82\x01R`\xE0\x83\x015\x82\x81\x11\x15a\x07\x1EW`\0\x80\xFD[a\x07*\x89\x82\x86\x01a\x05\xA4V[`\xE0\x83\x01RPa\x01\0\x83\x81\x015\x90\x82\x01Ra\x01 \x92\x83\x015\x92\x81\x01\x92\x90\x92RP\x92Pa\x07X` \x85\x01a\x05\x88V[\x91P`@\x84\x015\x90P\x92P\x92P\x92V[`\0[\x83\x81\x10\x15a\x07\x83W\x81\x81\x01Q\x83\x82\x01R` \x01a\x07kV[PP`\0\x91\x01RV[`\0k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x80\x8C``\x1B\x16\x83Rc\xFF\xFF\xFF\xFF`\xE0\x1B\x80\x8C`\xE0\x1B\x16`\x14\x85\x01R\x80\x8B`\xE0\x1B\x16`\x18\x85\x01RP\x80\x89``\x1B\x16`\x1C\x84\x01R\x80\x88``\x1B\x16`0\x84\x01RP\x85`D\x83\x01R\x84Qa\x07\xF3\x81`d\x85\x01` \x89\x01a\x07hV[\x90\x91\x01`d\x81\x01\x93\x90\x93RP`\x84\x82\x01R`\xA4\x01\x97\x96PPPPPPPV[`\0` \x82\x84\x03\x12\x15a\x08$W`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x084W`\0\x80\xFD[\x93\x92PPPV[`\0\x82Qa\x08M\x81\x84` \x87\x01a\x07hV[\x91\x90\x91\x01\x92\x91PPV[` \x81R`\0\x82Q\x80` \x84\x01Ra\x08v\x81`@\x85\x01` \x87\x01a\x07hV[`\x1F\x01`\x1F\x19\x16\x91\x90\x91\x01`@\x01\x92\x91PPV\xFE\xA2dipfsX\"\x12 \x86K\xD9/\xFEe\xA0\x86\x14t:\xF8\x9Dn]\x81sN\x084;0\x91\x93*\x07\xDDxI\xCF\x83,dsolcC\0\x08\x13\x003Deployed Swap Intent Filler at %shttps://api.avax-test.network/ext/bc/C/rpc\xA2dipfsX\"\x12 \xC37\x99\x1B\x93\\-u\x7F\xCB\x87\xE3o\r%V)\x17\x1D\xC93\r\xAAOtORB(\xDC\x8F\xE0dsolcC\0\x08\x13\x003";
    /// The deployed bytecode of the contract.
    pub static DEPLOYSWAPINTENTFILLER_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct DeploySwapIntentFiller<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for DeploySwapIntentFiller<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for DeploySwapIntentFiller<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for DeploySwapIntentFiller<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for DeploySwapIntentFiller<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(DeploySwapIntentFiller))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> DeploySwapIntentFiller<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    DEPLOYSWAPINTENTFILLER_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                DEPLOYSWAPINTENTFILLER_ABI.clone(),
                DEPLOYSWAPINTENTFILLER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function
        pub fn is_script(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `KHALANI_CHAIN_ID` (0x8a7d0b46) function
        pub fn khalani_chain_id(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, u32> {
            self.0
                .method_hash([138, 125, 11, 70], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `KHALANI_CHAIN_URL` (0x4aaddb5f) function
        pub fn khalani_chain_url(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::std::string::String> {
            self.0
                .method_hash([74, 173, 219, 95], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `KHALANI_MAILBOX` (0x509752f9) function
        pub fn khalani_mailbox(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([80, 151, 82, 249], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `SPOKE_CHAIN_ID` (0xab049489) function
        pub fn spoke_chain_id(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, u32> {
            self.0
                .method_hash([171, 4, 148, 137], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `SPOKE_CHAIN_MAILBOX` (0x80059ef4) function
        pub fn spoke_chain_mailbox(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([128, 5, 158, 244], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `SPOKE_CHAIN_URL` (0x8fbb9369) function
        pub fn spoke_chain_url(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::std::string::String> {
            self.0
                .method_hash([143, 187, 147, 105], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `run` (0xc0406226) function
        pub fn run(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([192, 64, 98, 38], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for DeploySwapIntentFiller<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    ///Container type for all input parameters for the `KHALANI_CHAIN_ID` function with signature `KHALANI_CHAIN_ID()` and selector `0x8a7d0b46`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "KHALANI_CHAIN_ID", abi = "KHALANI_CHAIN_ID()")]
    pub struct KhalaniChainIdCall;
    ///Container type for all input parameters for the `KHALANI_CHAIN_URL` function with signature `KHALANI_CHAIN_URL()` and selector `0x4aaddb5f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "KHALANI_CHAIN_URL", abi = "KHALANI_CHAIN_URL()")]
    pub struct KhalaniChainUrlCall;
    ///Container type for all input parameters for the `KHALANI_MAILBOX` function with signature `KHALANI_MAILBOX()` and selector `0x509752f9`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "KHALANI_MAILBOX", abi = "KHALANI_MAILBOX()")]
    pub struct KhalaniMailboxCall;
    ///Container type for all input parameters for the `SPOKE_CHAIN_ID` function with signature `SPOKE_CHAIN_ID()` and selector `0xab049489`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "SPOKE_CHAIN_ID", abi = "SPOKE_CHAIN_ID()")]
    pub struct SpokeChainIdCall;
    ///Container type for all input parameters for the `SPOKE_CHAIN_MAILBOX` function with signature `SPOKE_CHAIN_MAILBOX()` and selector `0x80059ef4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "SPOKE_CHAIN_MAILBOX", abi = "SPOKE_CHAIN_MAILBOX()")]
    pub struct SpokeChainMailboxCall;
    ///Container type for all input parameters for the `SPOKE_CHAIN_URL` function with signature `SPOKE_CHAIN_URL()` and selector `0x8fbb9369`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "SPOKE_CHAIN_URL", abi = "SPOKE_CHAIN_URL()")]
    pub struct SpokeChainUrlCall;
    ///Container type for all input parameters for the `run` function with signature `run()` and selector `0xc0406226`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "run", abi = "run()")]
    pub struct RunCall;
    ///Container type for all of the contract's call
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub enum DeploySwapIntentFillerCalls {
        IsScript(IsScriptCall),
        KhalaniChainId(KhalaniChainIdCall),
        KhalaniChainUrl(KhalaniChainUrlCall),
        KhalaniMailbox(KhalaniMailboxCall),
        SpokeChainId(SpokeChainIdCall),
        SpokeChainMailbox(SpokeChainMailboxCall),
        SpokeChainUrl(SpokeChainUrlCall),
        Run(RunCall),
    }
    impl ::ethers::core::abi::AbiDecode for DeploySwapIntentFillerCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <IsScriptCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::IsScript(decoded));
            }
            if let Ok(decoded) = <KhalaniChainIdCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::KhalaniChainId(decoded));
            }
            if let Ok(decoded) = <KhalaniChainUrlCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::KhalaniChainUrl(decoded));
            }
            if let Ok(decoded) = <KhalaniMailboxCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::KhalaniMailbox(decoded));
            }
            if let Ok(decoded) = <SpokeChainIdCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::SpokeChainId(decoded));
            }
            if let Ok(decoded) = <SpokeChainMailboxCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::SpokeChainMailbox(decoded));
            }
            if let Ok(decoded) = <SpokeChainUrlCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::SpokeChainUrl(decoded));
            }
            if let Ok(decoded) = <RunCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Run(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for DeploySwapIntentFillerCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::IsScript(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::KhalaniChainId(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::KhalaniChainUrl(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::KhalaniMailbox(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SpokeChainId(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SpokeChainMailbox(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SpokeChainUrl(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Run(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for DeploySwapIntentFillerCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::IsScript(element) => ::core::fmt::Display::fmt(element, f),
                Self::KhalaniChainId(element) => ::core::fmt::Display::fmt(element, f),
                Self::KhalaniChainUrl(element) => ::core::fmt::Display::fmt(element, f),
                Self::KhalaniMailbox(element) => ::core::fmt::Display::fmt(element, f),
                Self::SpokeChainId(element) => ::core::fmt::Display::fmt(element, f),
                Self::SpokeChainMailbox(element) => ::core::fmt::Display::fmt(element, f),
                Self::SpokeChainUrl(element) => ::core::fmt::Display::fmt(element, f),
                Self::Run(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<IsScriptCall> for DeploySwapIntentFillerCalls {
        fn from(value: IsScriptCall) -> Self {
            Self::IsScript(value)
        }
    }
    impl ::core::convert::From<KhalaniChainIdCall> for DeploySwapIntentFillerCalls {
        fn from(value: KhalaniChainIdCall) -> Self {
            Self::KhalaniChainId(value)
        }
    }
    impl ::core::convert::From<KhalaniChainUrlCall> for DeploySwapIntentFillerCalls {
        fn from(value: KhalaniChainUrlCall) -> Self {
            Self::KhalaniChainUrl(value)
        }
    }
    impl ::core::convert::From<KhalaniMailboxCall> for DeploySwapIntentFillerCalls {
        fn from(value: KhalaniMailboxCall) -> Self {
            Self::KhalaniMailbox(value)
        }
    }
    impl ::core::convert::From<SpokeChainIdCall> for DeploySwapIntentFillerCalls {
        fn from(value: SpokeChainIdCall) -> Self {
            Self::SpokeChainId(value)
        }
    }
    impl ::core::convert::From<SpokeChainMailboxCall> for DeploySwapIntentFillerCalls {
        fn from(value: SpokeChainMailboxCall) -> Self {
            Self::SpokeChainMailbox(value)
        }
    }
    impl ::core::convert::From<SpokeChainUrlCall> for DeploySwapIntentFillerCalls {
        fn from(value: SpokeChainUrlCall) -> Self {
            Self::SpokeChainUrl(value)
        }
    }
    impl ::core::convert::From<RunCall> for DeploySwapIntentFillerCalls {
        fn from(value: RunCall) -> Self {
            Self::Run(value)
        }
    }
    ///Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct IsScriptReturn(pub bool);
    ///Container type for all return fields from the `KHALANI_CHAIN_ID` function with signature `KHALANI_CHAIN_ID()` and selector `0x8a7d0b46`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct KhalaniChainIdReturn(pub u32);
    ///Container type for all return fields from the `KHALANI_CHAIN_URL` function with signature `KHALANI_CHAIN_URL()` and selector `0x4aaddb5f`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct KhalaniChainUrlReturn(pub ::std::string::String);
    ///Container type for all return fields from the `KHALANI_MAILBOX` function with signature `KHALANI_MAILBOX()` and selector `0x509752f9`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct KhalaniMailboxReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `SPOKE_CHAIN_ID` function with signature `SPOKE_CHAIN_ID()` and selector `0xab049489`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct SpokeChainIdReturn(pub u32);
    ///Container type for all return fields from the `SPOKE_CHAIN_MAILBOX` function with signature `SPOKE_CHAIN_MAILBOX()` and selector `0x80059ef4`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct SpokeChainMailboxReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `SPOKE_CHAIN_URL` function with signature `SPOKE_CHAIN_URL()` and selector `0x8fbb9369`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct SpokeChainUrlReturn(pub ::std::string::String);
}
